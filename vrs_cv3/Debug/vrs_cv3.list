
vrs_cv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000044c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005d4  080005d4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005d4  080005d4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080005d4  080005d4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d4  080005d4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d4  080005d4  000105d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005d8  080005d8  000105d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080005dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  080005e4  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005e4  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001183  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000642  00000000  00000000  000211bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00021800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  000219d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001317b  00000000  00000000  00021b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c7c  00000000  00000000  00034ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006abf8  00000000  00000000  0003695f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a1557  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000610  00000000  00000000  000a15ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005bc 	.word	0x080005bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080005bc 	.word	0x080005bc

080001c8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80001d2:	687a      	ldr	r2, [r7, #4]
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80001da:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <LL_InitTick+0x30>)
 80001dc:	3b01      	subs	r3, #1
 80001de:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <LL_InitTick+0x30>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001e6:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <LL_InitTick+0x30>)
 80001e8:	2205      	movs	r2, #5
 80001ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80001ec:	bf00      	nop
 80001ee:	370c      	adds	r7, #12
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr
 80001f8:	e000e010 	.word	0xe000e010

080001fc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000204:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f7ff ffdd 	bl	80001c8 <LL_InitTick>
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000220:	4a04      	ldr	r2, [pc, #16]	; (8000234 <LL_SetSystemCoreClock+0x1c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	6013      	str	r3, [r2, #0]
}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	20000004 	.word	0x20000004

08000238 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2b04      	cmp	r3, #4
 8000244:	d106      	bne.n	8000254 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <LL_SYSTICK_SetClkSource+0x34>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a08      	ldr	r2, [pc, #32]	; (800026c <LL_SYSTICK_SetClkSource+0x34>)
 800024c:	f043 0304 	orr.w	r3, r3, #4
 8000250:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000252:	e005      	b.n	8000260 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <LL_SYSTICK_SetClkSource+0x34>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a04      	ldr	r2, [pc, #16]	; (800026c <LL_SYSTICK_SetClkSource+0x34>)
 800025a:	f023 0304 	bic.w	r3, r3, #4
 800025e:	6013      	str	r3, [r2, #0]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e010 	.word	0xe000e010

08000270 <main>:
#include "main.h"
#include "assignment.h"
int add = 0;
int prevPinstate = 2;
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
   *  DO NOT WRITE TO THE WHOLE REGISTER!!!
   *  Write to the bits, that are meant for change.
   */
   
  //Systick init
  LL_Init1msTick(8000000);
 8000276:	4843      	ldr	r0, [pc, #268]	; (8000384 <main+0x114>)
 8000278:	f7ff ffc0 	bl	80001fc <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800027c:	2004      	movs	r0, #4
 800027e:	f7ff ffdb 	bl	8000238 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);	
 8000282:	4840      	ldr	r0, [pc, #256]	; (8000384 <main+0x114>)
 8000284:	f7ff ffc8 	bl	8000218 <LL_SetSystemCoreClock>
   * Code in this file must use these macros for the peripherals setup.
   * Code of the LED blink application is already given so just the macros used in the application must be defined.
   */

  /* Enable clock for GPIOA*/
    RCC_AHBENR_REG |= (uint32_t)(1 << 17);
 8000288:	4b3f      	ldr	r3, [pc, #252]	; (8000388 <main+0x118>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a3e      	ldr	r2, [pc, #248]	; (8000388 <main+0x118>)
 800028e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000292:	6013      	str	r3, [r2, #0]
    /* GPIOA pin 3 and 4 setup */
    // set mode PIN 3 input - PA3
    GPIOA_MODER_REG &= ~(uint32_t)(1 << 6);
 8000294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002a2:	6013      	str	r3, [r2, #0]
    GPIOA_MODER_REG &= ~(uint32_t)(1 << 7);
 80002a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002b2:	6013      	str	r3, [r2, #0]
    // set mode PIN 4 output - PA2, 0x3=11 o 8 miest do lava
    GPIOA_MODER_REG &= ~(uint32_t)(0x3 << 8);
 80002b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80002c2:	6013      	str	r3, [r2, #0]
    GPIOA_MODER_REG |= (uint32_t)(1 << 8);
 80002c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d2:	6013      	str	r3, [r2, #0]
    /*GPIO OTYPER register 1 to output open-drain*/
    GPIOA_OTYPER_REG &= ~(1 << 4);
 80002d4:	4b2d      	ldr	r3, [pc, #180]	; (800038c <main+0x11c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a2c      	ldr	r2, [pc, #176]	; (800038c <main+0x11c>)
 80002da:	f023 0310 	bic.w	r3, r3, #16
 80002de:	6013      	str	r3, [r2, #0]
    /*GPIO OSPEEDR register*/
    //Set for GPIOB pin 4 - x0 LOW speed, 0x3=11 o 8 miest do lava
    GPIOA_OSPEEDER_REG &= ~(1 << 8);
 80002e0:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <main+0x120>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a2a      	ldr	r2, [pc, #168]	; (8000390 <main+0x120>)
 80002e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ea:	6013      	str	r3, [r2, #0]
    GPIOA_OSPEEDER_REG &= ~(1 << 9);
 80002ec:	4b28      	ldr	r3, [pc, #160]	; (8000390 <main+0x120>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a27      	ldr	r2, [pc, #156]	; (8000390 <main+0x120>)
 80002f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80002f6:	6013      	str	r3, [r2, #0]
    /*GPIO PUPDR register, reset*/
      //Set pull up for GPIOB pin 3 (in)
    GPIOA_PUPDR_REG |= (1 << 6);
 80002f8:	4b26      	ldr	r3, [pc, #152]	; (8000394 <main+0x124>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a25      	ldr	r2, [pc, #148]	; (8000394 <main+0x124>)
 80002fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000302:	6013      	str	r3, [r2, #0]
    //Set no pull for GPIOB pin 4 (out)
    GPIOA_PUPDR_REG &= ~(1 << 8);
 8000304:	4b23      	ldr	r3, [pc, #140]	; (8000394 <main+0x124>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a22      	ldr	r2, [pc, #136]	; (8000394 <main+0x124>)
 800030a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800030e:	6013      	str	r3, [r2, #0]
    GPIOA_PUPDR_REG &= ~(1 << 9);
 8000310:	4b20      	ldr	r3, [pc, #128]	; (8000394 <main+0x124>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1f      	ldr	r2, [pc, #124]	; (8000394 <main+0x124>)
 8000316:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800031a:	6013      	str	r3, [r2, #0]
    int edge =0;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
    uint8_t pin_state;
    uint8_t prevPinstate;

  while (1)
  {
	  pin_state=BUTTON_GET_STATE;
 8000320:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <main+0x128>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	b2db      	uxtb	r3, r3
 8000326:	f003 0308 	and.w	r3, r3, #8
 800032a:	72fb      	strb	r3, [r7, #11]
	  get =edgeDetect(BUTTON_GET_STATE,3);
 800032c:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <main+0x128>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	f003 0308 	and.w	r3, r3, #8
 8000336:	b2db      	uxtb	r3, r3
 8000338:	2103      	movs	r1, #3
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f832 	bl	80003a4 <edgeDetect>
 8000340:	4603      	mov	r3, r0
 8000342:	607b      	str	r3, [r7, #4]
	  if (get == 1){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d102      	bne.n	8000350 <main+0xe0>
		  edge = 1; //zapni led
 800034a:	2301      	movs	r3, #1
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e004      	b.n	800035a <main+0xea>
	  }else if (get == 2){
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b02      	cmp	r3, #2
 8000354:	d101      	bne.n	800035a <main+0xea>
		  edge = 2; //vypni led
 8000356:	2302      	movs	r3, #2
 8000358:	60fb      	str	r3, [r7, #12]
	  }



	  if(edge == 1)
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d106      	bne.n	800036e <main+0xfe>
	  {
		  //LED ON
		  LED_ON;
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <main+0x12c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a0d      	ldr	r2, [pc, #52]	; (800039c <main+0x12c>)
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6013      	str	r3, [r2, #0]
 800036c:	e7d8      	b.n	8000320 <main+0xb0>
	  }
	  else if(edge == 2)
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	2b02      	cmp	r3, #2
 8000372:	d1d5      	bne.n	8000320 <main+0xb0>
	  {
		  //LED OFF
		  LED_OFF;
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <main+0x130>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a09      	ldr	r2, [pc, #36]	; (80003a0 <main+0x130>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6013      	str	r3, [r2, #0]
	  pin_state=BUTTON_GET_STATE;
 8000380:	e7ce      	b.n	8000320 <main+0xb0>
 8000382:	bf00      	nop
 8000384:	007a1200 	.word	0x007a1200
 8000388:	40021014 	.word	0x40021014
 800038c:	48000004 	.word	0x48000004
 8000390:	48000008 	.word	0x48000008
 8000394:	4800000c 	.word	0x4800000c
 8000398:	48000010 	.word	0x48000010
 800039c:	48000018 	.word	0x48000018
 80003a0:	48000028 	.word	0x48000028

080003a4 <edgeDetect>:
  }

}


enum EDGE_TYPE edgeDetect(uint8_t pin_state, uint8_t samples){
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	460a      	mov	r2, r1
 80003ae:	71fb      	strb	r3, [r7, #7]
 80003b0:	4613      	mov	r3, r2
 80003b2:	71bb      	strb	r3, [r7, #6]
	uint8_t off=0x8;
 80003b4:	2308      	movs	r3, #8
 80003b6:	73fb      	strb	r3, [r7, #15]
	uint8_t on=0x0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	73bb      	strb	r3, [r7, #14]
if(prevPinstate == pin_state){
 80003bc:	79fa      	ldrb	r2, [r7, #7]
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <edgeDetect+0x80>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d105      	bne.n	80003d2 <edgeDetect+0x2e>
	add=add+1;
 80003c6:	4b18      	ldr	r3, [pc, #96]	; (8000428 <edgeDetect+0x84>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	3301      	adds	r3, #1
 80003cc:	4a16      	ldr	r2, [pc, #88]	; (8000428 <edgeDetect+0x84>)
 80003ce:	6013      	str	r3, [r2, #0]
 80003d0:	e002      	b.n	80003d8 <edgeDetect+0x34>
}else {
	add = 1;
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <edgeDetect+0x84>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	601a      	str	r2, [r3, #0]
}

		if ((add == samples)&& pin_state == off){
 80003d8:	79ba      	ldrb	r2, [r7, #6]
 80003da:	4b13      	ldr	r3, [pc, #76]	; (8000428 <edgeDetect+0x84>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	429a      	cmp	r2, r3
 80003e0:	d108      	bne.n	80003f4 <edgeDetect+0x50>
 80003e2:	79fa      	ldrb	r2, [r7, #7]
 80003e4:	7bfb      	ldrb	r3, [r7, #15]
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d104      	bne.n	80003f4 <edgeDetect+0x50>
			prevPinstate=pin_state;
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	4a0d      	ldr	r2, [pc, #52]	; (8000424 <edgeDetect+0x80>)
 80003ee:	6013      	str	r3, [r2, #0]
			return fall;
 80003f0:	2302      	movs	r3, #2
 80003f2:	e011      	b.n	8000418 <edgeDetect+0x74>
		}

		if ((add == samples)&& pin_state == on){
 80003f4:	79ba      	ldrb	r2, [r7, #6]
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <edgeDetect+0x84>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d108      	bne.n	8000410 <edgeDetect+0x6c>
 80003fe:	79fa      	ldrb	r2, [r7, #7]
 8000400:	7bbb      	ldrb	r3, [r7, #14]
 8000402:	429a      	cmp	r2, r3
 8000404:	d104      	bne.n	8000410 <edgeDetect+0x6c>
			prevPinstate=pin_state;
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	4a06      	ldr	r2, [pc, #24]	; (8000424 <edgeDetect+0x80>)
 800040a:	6013      	str	r3, [r2, #0]
			return rise;
 800040c:	2301      	movs	r3, #1
 800040e:	e003      	b.n	8000418 <edgeDetect+0x74>
		}

	prevPinstate=pin_state;
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	4a04      	ldr	r2, [pc, #16]	; (8000424 <edgeDetect+0x80>)
 8000414:	6013      	str	r3, [r2, #0]
	return none;
 8000416:	2300      	movs	r3, #0
}
 8000418:	4618      	mov	r0, r3
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	20000000 	.word	0x20000000
 8000428:	20000024 	.word	0x20000024

0800042c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <HardFault_Handler+0x4>

08000440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <MemManage_Handler+0x4>

08000446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <BusFault_Handler+0x4>

0800044c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <UsageFault_Handler+0x4>

08000452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
	...

0800048c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000490:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <SystemInit+0x84>)
 8000492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000496:	4a1e      	ldr	r2, [pc, #120]	; (8000510 <SystemInit+0x84>)
 8000498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800049c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80004a0:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <SystemInit+0x88>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a1b      	ldr	r2, [pc, #108]	; (8000514 <SystemInit+0x88>)
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80004ac:	4b19      	ldr	r3, [pc, #100]	; (8000514 <SystemInit+0x88>)
 80004ae:	685a      	ldr	r2, [r3, #4]
 80004b0:	4918      	ldr	r1, [pc, #96]	; (8000514 <SystemInit+0x88>)
 80004b2:	4b19      	ldr	r3, [pc, #100]	; (8000518 <SystemInit+0x8c>)
 80004b4:	4013      	ands	r3, r2
 80004b6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004b8:	4b16      	ldr	r3, [pc, #88]	; (8000514 <SystemInit+0x88>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a15      	ldr	r2, [pc, #84]	; (8000514 <SystemInit+0x88>)
 80004be:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004c6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <SystemInit+0x88>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a11      	ldr	r2, [pc, #68]	; (8000514 <SystemInit+0x88>)
 80004ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <SystemInit+0x88>)
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <SystemInit+0x88>)
 80004da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004de:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <SystemInit+0x88>)
 80004e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e4:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <SystemInit+0x88>)
 80004e6:	f023 030f 	bic.w	r3, r3, #15
 80004ea:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <SystemInit+0x88>)
 80004ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f0:	4908      	ldr	r1, [pc, #32]	; (8000514 <SystemInit+0x88>)
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <SystemInit+0x90>)
 80004f4:	4013      	ands	r3, r2
 80004f6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <SystemInit+0x88>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004fe:	4b04      	ldr	r3, [pc, #16]	; (8000510 <SystemInit+0x84>)
 8000500:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000504:	609a      	str	r2, [r3, #8]
#endif
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	e000ed00 	.word	0xe000ed00
 8000514:	40021000 	.word	0x40021000
 8000518:	f87fc00c 	.word	0xf87fc00c
 800051c:	ff00fccc 	.word	0xff00fccc

08000520 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000558 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000524:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000526:	e003      	b.n	8000530 <LoopCopyDataInit>

08000528 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800052a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800052c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800052e:	3104      	adds	r1, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000534:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000536:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000538:	d3f6      	bcc.n	8000528 <CopyDataInit>
	ldr	r2, =_sbss
 800053a:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <LoopForever+0x12>)
	b	LoopFillZerobss
 800053c:	e002      	b.n	8000544 <LoopFillZerobss>

0800053e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800053e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000540:	f842 3b04 	str.w	r3, [r2], #4

08000544 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <LoopForever+0x16>)
	cmp	r2, r3
 8000546:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000548:	d3f9      	bcc.n	800053e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800054a:	f7ff ff9f 	bl	800048c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054e:	f000 f811 	bl	8000574 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000552:	f7ff fe8d 	bl	8000270 <main>

08000556 <LoopForever>:

LoopForever:
    b LoopForever
 8000556:	e7fe      	b.n	8000556 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000558:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800055c:	080005dc 	.word	0x080005dc
	ldr	r0, =_sdata
 8000560:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000564:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8000568:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 800056c:	20000028 	.word	0x20000028

08000570 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000570:	e7fe      	b.n	8000570 <ADC1_2_IRQHandler>
	...

08000574 <__libc_init_array>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	4d0d      	ldr	r5, [pc, #52]	; (80005ac <__libc_init_array+0x38>)
 8000578:	4c0d      	ldr	r4, [pc, #52]	; (80005b0 <__libc_init_array+0x3c>)
 800057a:	1b64      	subs	r4, r4, r5
 800057c:	10a4      	asrs	r4, r4, #2
 800057e:	2600      	movs	r6, #0
 8000580:	42a6      	cmp	r6, r4
 8000582:	d109      	bne.n	8000598 <__libc_init_array+0x24>
 8000584:	4d0b      	ldr	r5, [pc, #44]	; (80005b4 <__libc_init_array+0x40>)
 8000586:	4c0c      	ldr	r4, [pc, #48]	; (80005b8 <__libc_init_array+0x44>)
 8000588:	f000 f818 	bl	80005bc <_init>
 800058c:	1b64      	subs	r4, r4, r5
 800058e:	10a4      	asrs	r4, r4, #2
 8000590:	2600      	movs	r6, #0
 8000592:	42a6      	cmp	r6, r4
 8000594:	d105      	bne.n	80005a2 <__libc_init_array+0x2e>
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	f855 3b04 	ldr.w	r3, [r5], #4
 800059c:	4798      	blx	r3
 800059e:	3601      	adds	r6, #1
 80005a0:	e7ee      	b.n	8000580 <__libc_init_array+0xc>
 80005a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a6:	4798      	blx	r3
 80005a8:	3601      	adds	r6, #1
 80005aa:	e7f2      	b.n	8000592 <__libc_init_array+0x1e>
 80005ac:	080005d4 	.word	0x080005d4
 80005b0:	080005d4 	.word	0x080005d4
 80005b4:	080005d4 	.word	0x080005d4
 80005b8:	080005d8 	.word	0x080005d8

080005bc <_init>:
 80005bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005be:	bf00      	nop
 80005c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c2:	bc08      	pop	{r3}
 80005c4:	469e      	mov	lr, r3
 80005c6:	4770      	bx	lr

080005c8 <_fini>:
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	bf00      	nop
 80005cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ce:	bc08      	pop	{r3}
 80005d0:	469e      	mov	lr, r3
 80005d2:	4770      	bx	lr
